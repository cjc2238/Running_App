predicted_total
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_point() + geom_smooth(method = "lm", col = "red")
predicted_total
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_point() + geom_smooth(col = "red")
predicted_total
total_reg
predicted_total  + theme_light()
df4 <- rbind(df3, year_df)
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_point() + geom_smooth(col = "red")
predicted_total  + theme_light()
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_point() + geom_smooth(method = "lm", col = "red")
predicted_total  + theme_light()
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm", col = "red")
predicted_total  + theme_light()
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm", col = "red", size = 1)
predicted_total  + theme_light()
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm", col = "red", size = 10)
predicted_total  + theme_light()
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm", col = "red", size = 2)
predicted_total  + theme_light()
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm")
predicted_total  + theme_light()
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm") + labs(title = "Predicted Year End Distance", x = "Day of Year", y = "Total Distance Completed in Miles")
predicted_total  + theme_light()
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm") + labs(title = "Predicted Year End Distance", x = "Day of Year", y = "Total Distance Completed in Miles") + theme(plot.title = element_text(hjust = 0.5))
predicted_total  + theme_light()
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm") + labs(title = "Predicted Year End Distance", x = "Day of Year", y = "Total Distance Completed in Miles") + theme(plot.title = element_text(vjust = 0.5))
predicted_total  + theme_light()
df4 <- rbind(df3, year_df)
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm") + labs(title = "Predicted Year End Distance", x = "Day of Year", y = "Total Distance Completed in Miles") + theme(plot.title = element_text(hjust = 0.5))
predicted_total  + theme_light()
predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5))
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm") + labs(title = "Predicted Year End Distance", x = "Day of Year", y = "Total Distance Completed in Miles") + geom_hline(yintercept = 2017, colour = "red", size = .8, linetype = "dotted") + annotate("text", x = 3, y = 10.3, label = "9.697 Miles", size = 3, colour = "black")
predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5))
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm") + labs(title = "Predicted Year End Distance", x = "Day of Year", y = "Total Distance Completed in Miles") + geom_hline(yintercept = 2017, colour = "red", size = .8, linetype = "dotted") + annotate("text", x = 200, y = 2017, label = "9.697 Miles", size = 3, colour = "black")
predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5))
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm") + labs(title = "Predicted Year End Distance", x = "Day of Year", y = "Total Distance Completed in Miles") + geom_hline(yintercept = 2017, colour = "red", size = .8, linetype = "dotted") + annotate("text", x = 150, y = 1900, label = "2017 Miles", size = 3, colour = "black")
predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5))
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm") + labs(title = "Predicted Year End Distance", x = "Day of Year", y = "Total Distance Completed in Miles") + geom_hline(yintercept = 2017, colour = "red", size = .8, linetype = "dotted") + annotate("text", x = 150, y = 2000, label = "2017 Miles", size = 3, colour = "black")
predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5))
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm") + labs(title = "Predicted Year End Distance", x = "Day of Year", y = "Total Distance Completed in Miles") + geom_hline(yintercept = 2017, colour = "red", size = .8, linetype = "dotted") + annotate("text", x = 150, y = 1950, label = "2017 Miles", size = 3, colour = "black")
predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5))
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm") + labs(title = "Predicted Year End Distance", x = "Day of Year", y = "Total Distance Completed in Miles") + geom_hline(yintercept = 2017, colour = "red", size = .8, linetype = "dotted") + annotate("text", x = 50, y = 1950, label = "2017 Miles", size = 3, colour = "black")
predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5))
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm") + labs(title = "Predicted Year End Distance", x = "Day of Year", y = "Total Distance Completed in Miles") + geom_hline(yintercept = 2017, colour = "red", size = .8, linetype = "dotted") + annotate("text", x = 50, y = 1950, label = "2017 Miles", size = 5, colour = "black")
predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5))
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm") + labs(title = "Predicted Year End Distance", x = "Day of Year", y = "Total Distance Completed in Miles") + geom_hline(yintercept = 2017, colour = "red", size = .8, linetype = "dotted") + annotate("text", x = 150, y = 1950, label = "2017 Miles", size = 5, colour = "black")
predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5))
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm") + labs(title = "Predicted Year End Distance", x = "Day of Year", y = "Total Distance Completed in Miles") + geom_hline(yintercept = 2017, colour = "red", size = .8, linetype = "dotted") + annotate("text", x = 70, y = 1950, label = "2017 Miles", size = 5, colour = "black")
predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5))
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm") + labs(title = "Predicted Year End Distance", x = "Day of Year", y = "Total Distance Completed in Miles") + geom_hline(yintercept = 2017, colour = "red", size = .8, linetype = "dotted") + annotate("text", x = 70, y = 1950, label = "2017 Miles", size = 4, colour = "black")
predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5))
predicted_reg <- predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5))
require(gridExtra)
grid.arrange(total_reg, predicted_reg, ncol=1)
total_reg <- p + theme_light() + theme(plot.title = element_text(hjust = 0.5))
total_reg
year_df <- data.frame(day = 53:365)
year_df$cumsum <- predict(model1, year_df)
df4 <- rbind(df3, year_df)
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm") + labs(title = "Predicted Year End Distance", x = "Day of Year", y = "Total Distance Completed in Miles") + geom_hline(yintercept = 2017, colour = "red", size = .8, linetype = "dotted") + annotate("text", x = 70, y = 1950, label = "2017 Miles", size = 4, colour = "black")
predicted_reg <- predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5))
require(gridExtra)
grid.arrange(total_reg, predicted_reg, ncol=1)
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)), x = "Day of Year", y = "Total Distance Completed in Miles")
}
p <- ggplotRegression(model1)
total_reg <- p + theme_light() + theme(plot.title = element_text(hjust = 0.5))
total_reg
year_df <- data.frame(day = 53:365)
year_df$cumsum <- predict(model1, year_df)
df4 <- rbind(df3, year_df)
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm") + labs(title = "Predicted Year End Distance", x = "Day of Year", y = "Total Distance Completed in Miles") + geom_hline(yintercept = 2017, colour = "red", size = .8, linetype = "dotted") + annotate("text", x = 70, y = 1950, label = "2017 Miles", size = 4, colour = "black")
predicted_reg <- predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5))
require(gridExtra)
grid.arrange(total_reg, predicted_reg, ncol=1)
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm") + labs(title = "Predicted Year End Distance", x = "Day of Year", y = "Total Distance Completed in Miles") + geom_hline(yintercept = 2017, colour = "red", size = .8, linetype = "dotted") + annotate("text", x = 70, y = 1850, label = "2017 Miles", size = 4, colour = "black")
predicted_reg <- predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5))
require(gridExtra)
grid.arrange(total_reg, predicted_reg, ncol=1)
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm") + labs(title = "Predicted Year End Distance", x = "Day of Year", y = "Total Distance Completed in Miles") + geom_hline(yintercept = 2017, colour = "red", size = .8, linetype = "dotted") + annotate("text", x = 70, y = 1875, label = "2017 Miles", size = 4, colour = "black")
predicted_reg <- predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5))
require(gridExtra)
grid.arrange(total_reg, predicted_reg, ncol=1)
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5)), x = "Day of Year", y = "Total Distance Completed in Miles")
}
p <- ggplotRegression(model1)
total_reg <- p + theme_light() + theme(plot.title = element_text(hjust = 0.5))
total_reg
year_df <- data.frame(day = 53:365)
year_df$cumsum <- predict(model1, year_df)
df4 <- rbind(df3, year_df)
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm") + labs(title = "Predicted Year End Distance", x = "Day of Year", y = "Total Distance Completed in Miles") + geom_hline(yintercept = 2017, colour = "red", size = .8, linetype = "dotted") + annotate("text", x = 70, y = 1875, label = "2017 Miles", size = 4, colour = "black")
predicted_reg <- predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5))
require(gridExtra)
grid.arrange(total_reg, predicted_reg, ncol=1)
predicted_reg <- predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5)) + annotate("text", x = 365, y = 1489.58, label = "1489.58 Miles", size = 4, colour = "black")
require(gridExtra)
grid.arrange(total_reg, predicted_reg, ncol=1)
predicted_reg <- predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5)) + annotate("text", x = 365, y = 1500, label = "1489.58 Miles", size = 4, colour = "black")
require(gridExtra)
grid.arrange(total_reg, predicted_reg, ncol=1)
predicted_reg <- predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5)) + annotate("text", x = 365, y = 1600, label = "1489.58 Miles", size = 4, colour = "black")
require(gridExtra)
grid.arrange(total_reg, predicted_reg, ncol=1)
predicted_reg <- predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5)) + annotate("text", x = 350, y = 1600, label = "1489.58 Miles", size = 4, colour = "black")
require(gridExtra)
grid.arrange(total_reg, predicted_reg, ncol=1)
predicted_reg <- predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5)) + annotate("text", x = 350, y = 1600, label = "1489.58 Miles", size = 4, colour = "blue")
require(gridExtra)
grid.arrange(total_reg, predicted_reg, ncol=1)
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm", col = "blue") + labs(title = "Predicted Year End Distance", x = "Day of Year", y = "Total Distance Completed in Miles") + geom_hline(yintercept = 2017, colour = "red", size = .8, linetype = "dotted") + annotate("text", x = 70, y = 1875, label = "2017 Miles", size = 4, colour = "black")
predicted_reg <- predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5)) + annotate("text", x = 350, y = 1600, label = "1489.58 Miles", size = 4, colour = "blue")
require(gridExtra)
grid.arrange(total_reg, predicted_reg, ncol=1)
predicted_reg <- predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5)) + annotate("text", x = 350, y = 1500, label = "1489.58 Miles", size = 4, colour = "blue")
require(gridExtra)
grid.arrange(total_reg, predicted_reg, ncol=1)
predicted_reg <- predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5)) + annotate("text", x = 350, y = 1400, label = "1489.58 Miles", size = 4, colour = "blue")
require(gridExtra)
grid.arrange(total_reg, predicted_reg, ncol=1)
predicted_reg <- predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5)) + annotate("text", x = 350, y = 1350, label = "1489.58 Miles", size = 4, colour = "blue")
require(gridExtra)
grid.arrange(total_reg, predicted_reg, ncol=1)
predicted_reg <- predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5)) + annotate("text", x = 350, y = 1350, label = "1489.58
Miles", size = 4, colour = "blue")
require(gridExtra)
grid.arrange(total_reg, predicted_reg, ncol=1)
predicted_reg <- predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5)) + annotate("text", x = 350, y = 1350, label = "1489.58
Miles", size = 4, colour = "blue")
require(gridExtra)
grid.arrange(total_reg, predicted_reg, ncol=1)
predicted_reg <- predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5)) + annotate("text", x = 360, y = 1350, label = "1489.58
Miles", size = 4, colour = "blue")
require(gridExtra)
grid.arrange(total_reg, predicted_reg, ncol=1)
predicted_reg <- predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5)) + annotate("text", x = 360, y = 1250, label = "1489.58
Miles", size = 4, colour = "blue")
require(gridExtra)
grid.arrange(total_reg, predicted_reg, ncol=1)
predicted_reg + total_reg
ggplot(year_df, aes(day, cumsum)) + geom_line()
test <- ggplot(year_df, aes(day, cumsum)) + geom_line()
test + total_reg
test + ggplot(df3, aes(day, cumsum)) + geom_line()
p <- ggplotRegression(model1)
total_reg <- p + theme_light() + theme(plot.title = element_text(hjust = 0.5))
total_reg
year_df <- data.frame(day = 53:365)
year_df$cumsum <- predict(model1, year_df)
df4 <- rbind(df3, year_df)
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm", col = "blue") + labs(title = "Predicted Year End Distance", x = "Day of Year", y = "Total Distance Completed in Miles") + geom_hline(yintercept = 2017, colour = "red", size = .8, linetype = "dotted") + annotate("text", x = 70, y = 1875, label = "2017 Miles", size = 4, colour = "black")
predicted_reg <- predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5)) + annotate("text", x = 360, y = 1250, label = "1489.58
Miles", size = 4, colour = "blue")
require(gridExtra)
grid.arrange(total_reg, predicted_reg, ncol=1)
source('~/GitHub/Running_App/chad_regression_models.R')
require(RCurl)
fileUrl <- "https://docs.google.com/spreadsheets/d/1RTRABrYQhyyfj_Dr3bkmNSnxmM7jbXIMgrI8eOa7Avk/export?format=csv"
fileCSV <- getURL(fileUrl,.opts=list(ssl.verifypeer=FALSE))
fileCSVDF <-  read.csv(textConnection(fileCSV))
df <- fileCSVDF[,c(1:5)]
require(lubridate)
df$time_stamp <- as.POSIXct(df$time_stamp, format='%m/%d/%Y %H:%M:%OS')
df$run_time <- as.POSIXct(df$run_time, format='%H:%M:%OS')
df$run_time <- format(df$run_time, format='%H:%M:%OS')
df$run_time_decimal <-  sapply(strsplit(df$run_time,":"),
function(x) {
x <- as.numeric(x)
x[1]+x[2]/60
}
)
df$week <- format(df$time_stamp, format='%W')
df$week <- as.numeric(df$week)
df$week[df$week == 0] <- 1
df$day <- yday(df$time_stamp)
df$year <- year(df$time_stamp)
df$week[df$week == '00'] <- '01'
df$weekday <- weekdays(df$time_stamp)
df$location[df$location == "Hell (treadmill)"] <- 'Treadmill'
df <- df[ which(df$location=="Treadmill"), ]
df1 <- aggregate(df$miles, by=list(person=df$person), FUN=sum)
colnames(df1) <- c("person","miles")
df2 <- aggregate(df$miles, by=list(person=df$person, day=df$day), FUN=sum)
colnames(df2) <- c("person","day","miles")
df3 <- aggregate(df$miles, by=list(day=df$day), FUN=sum)
colnames(df3) <- c("day","miles")
df4 <- aggregate(df$miles, by=list(person=df$person, week=df$week), FUN=sum)
colnames(df4) <- c("person", "week","miles")
df5 <- aggregate(df$run_time_decimal, by=list(person=df$person, day=df$day), FUN=sum)
colnames(df5) <- c("person","day","run_time_decimal")
df6 <- merge(df2, df5, by=c("person","day"))
df7 <- merge(df6, df, by.x='day', by.y='day')
df_chad <- df7[ which(df7$person.y=="Chad"), ]
df_chad <- df_chad[ which(df_chad$person.x=="Chad"), ]
df_chad <- df_chad[,-c(5:10)]
df_chad <- unique(df_chad)
df_chad$mile_time <- df_chad$miles/df_chad$run_time_decimal
colnames(df_chad) <- c("day", "person","miles","run_time_decimal","week","year","weekday","mile_time")
df_chad <- df_chad[,-c(2,6)]
outlierKD <- function(dt, var) {
var_name <- eval(substitute(var),eval(dt))
na1 <- sum(is.na(var_name))
m1 <- mean(var_name, na.rm = T)
par(mfrow=c(2, 2), oma=c(0,0,3,0))
boxplot(var_name, main="With outliers")
hist(var_name, main="With outliers", xlab=NA, ylab=NA)
outlier <- boxplot.stats(var_name)$out
mo <- mean(outlier)
var_name <- ifelse(var_name %in% outlier, NA, var_name)
boxplot(var_name, main="Without outliers")
hist(var_name, main="Without outliers", xlab=NA, ylab=NA)
title("Outlier Check", outer=TRUE)
na2 <- sum(is.na(var_name))
cat("Outliers identified:", na2 - na1, "n")
cat("Propotion (%) of outliers:", round((na2 - na1) / sum(!is.na(var_name))*100, 1), "n")
cat("Mean of the outliers:", round(mo, 2), "n")
m2 <- mean(var_name, na.rm = T)
cat("Mean without removing outliers:", round(m1, 2), "n")
cat("Mean if we remove outliers:", round(m2, 2), "n")
response <- readline(prompt="Do you want to remove outliers and to replace with NA? [yes/no]: ")
if(response == "y" | response == "yes"){
dt[as.character(substitute(var))] <- invisible(var_name)
assign(as.character(as.list(match.call())$dt), dt, envir = .GlobalEnv)
cat("Outliers successfully removed", "n")
return(invisible(dt))
} else{
cat("Nothing changed", "n")
return(invisible(var_name))
}
}
df_chad1 <- outlierKD(df_chad, miles)
final_chad <- df_chad[complete.cases(df_chad),]
final_chad$weekday <- as.factor(final_chad$weekday)
final_chad$week <- as.numeric(final_chad$week)
df_chad_jogging <- final_chad[ which(final_chad$mile_time>=5.0), ]
model1 <- lm(mile_time ~ day + miles, df_chad_jogging)
summary(model1)
confint(model1, conf.level=0.95)
plot(model1)
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)), x = "Day of Year", y = "Time to Complete Run (MPH)")
}
p <- ggplotRegression(model1)
day_reg <- p + theme_light()
chad_week <- df_chad_jogging[,-c(1,5,6)]
chad_week1 <- aggregate(chad_week, by=list(chad_week$week), FUN=sum)
chad_week2 <- chad_week1[,-4]
chad_week2$mile_time <- chad_week2$miles/chad_week2$run_time_decimal
colnames(chad_week2) <- c("week","miles","run_time_decimal","mile_time")
model2 <- lm(mile_time ~ week + miles, chad_week2)
summary(model2)
confint(model2, conf.level=0.95)
plot(model2)
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)), x = "Week of Year", y = "Time to Complete Run (MPH)")
}
p <- ggplotRegression(model2)
week_reg <- p + theme_light()
week_reg
predict(model1, data.frame(day = 71, miles = 3.2))
predict(model2, data.frame(week = 11, miles = 3.2))
require(gridExtra)
grid.arrange(day_reg, week_reg, ncol=1)
require(RCurl)
require(dplyr)
require(lubridate)
fileUrl <- "https://docs.google.com/spreadsheets/d/1RTRABrYQhyyfj_Dr3bkmNSnxmM7jbXIMgrI8eOa7Avk/export?format=csv"
fileCSV <- getURL(fileUrl,.opts=list(ssl.verifypeer=FALSE))
fileCSVDF <-  read.csv(textConnection(fileCSV))
df <- fileCSVDF[,c(1:5)]
df$time_stamp <- as.POSIXct(df$time_stamp, format='%m/%d/%Y %H:%M:%OS')
df$run_time <- as.POSIXct(df$run_time, format='%H:%M:%OS')
df$run_time <- format(df$run_time, format='%H:%M:%OS')
df$run_time_decimal <-  sapply(strsplit(df$run_time,":"),
function(x) {
x <- as.numeric(x)
x[1]+x[2]/60
}
)
df$week <- format(df$time_stamp, format='%W')
df$week <- as.numeric(df$week)
df$week[df$week == 0] <- 1
df$day <- yday(df$time_stamp)
df$year <- year(df$time_stamp)
df$week[df$week == '00'] <- '01'
df$weekday <- weekdays(df$time_stamp)
df$location[df$location == "Hell (treadmill)"] <- 'Treadmill'
View(df)
df1 <- aggregate(df$miles, by=list(day=df$day), FUN=sum)
View(df1)
df1 <- aggregate(df$miles, by=list(day=df$day), FUN=sum)
df1$year <- 2017
colnames(df1) <- c("day","miles","year")
View(df1)
df2 <- df1 %>% group_by(year) %>% mutate(cumsum = cumsum(miles))
View(df2)
require(RCurl)
fileUrl <- "https://docs.google.com/spreadsheets/d/1RTRABrYQhyyfj_Dr3bkmNSnxmM7jbXIMgrI8eOa7Avk/export?format=csv"
fileCSV <- getURL(fileUrl,.opts=list(ssl.verifypeer=FALSE))
fileCSVDF <-  read.csv(textConnection(fileCSV))
df <- fileCSVDF[,c(1:5)]
require(lubridate)
df$time_stamp <- as.POSIXct(df$time_stamp, format='%m/%d/%Y %H:%M:%OS')
df$run_time <- as.POSIXct(df$run_time, format='%H:%M:%OS')
df$run_time2 <- format(df$run_time, format='%H:%M:%OS')
df$week <- format(df$time_stamp, format='%W')
df$yday <- yday(df$time_stamp)
df$year <- year(df$time_stamp)
df$week[df$week == '00'] <- '01'
df$location[df$location == "Hell (treadmill)"] <- 'Treadmill'
df1 <- aggregate(df$miles, by=list(person=df$person), FUN=sum)
colnames(df1) <- c("person","miles")
df2 <- aggregate(df$miles, by=list(person=df$person, day=df$yday), FUN=sum)
colnames(df2) <- c("person","day","miles")
df3 <- aggregate(df$miles, by=list(yday=df$yday), FUN=sum)
colnames(df3) <- c("day","miles")
df4 <- aggregate(df$miles, by=list(person=df$person, week=df$week), FUN=sum)
colnames(df4) <- c("person", "week","miles")
require(ggplot2)
p <- ggplot(df, aes(week, miles, colour=person, fill = person , label = miles)) + geom_bar(stat="identity")  + labs(list(title = "Total Miles Accomplished Per Week", x = "Week of Year", y = "Total Miles Accomplished")) + theme_light()
person_time_series <- p + scale_y_continuous(expand = c(0, .5)) + geom_hline(yintercept = 9.697, colour = "black", size = .8, linetype = "dotted") + annotate("text", x = 3, y = 10.3, label = "9.697 Miles", size = 3, colour = "black") + theme(plot.title = element_text(hjust = 0.5)) + facet_wrap(~ person)
print(person_time_series)
p <- ggplot(df3, aes(day, miles, label=miles))  + labs(list(title = "Total Miles Accomplished by Everyone (Per Day)", x = "Day of Year", y = "Total Miles Accomplished")) + geom_area(fill="#838B83")
total_time_series <- p + geom_hline(yintercept = 5.526, colour = "black", size = .8, linetype = "dotted") + annotate("text", x = 21, y = 5.9, label = "Min Needed to meet year goal", size = 3, colour = "black") + theme_light() + theme(plot.title = element_text(hjust = 0.5)) + geom_point(color="black") + geom_text(aes(label=miles),hjust=-.3, vjust=0, color = "black") + geom_smooth()
print(total_time_series)
totals <- ggplot(data = df1, aes(person, miles, fill=person)) + geom_bar(stat = "identity") + geom_text(aes(label=df1$miles), vjust=2, size=4) + labs(list(title = "Total Miles Accomplished Per Person", x = "Person", y = "Total Distance Accomplished (miles)")) + theme_light() + theme(plot.title = element_text(hjust = 0.5))
print(totals)
scatter <- p + theme(plot.title = element_text(hjust = 0.5))
print(scatter)
p <- ggplot(df, aes(x=week, y=miles, col = location, fill = location)) + geom_bar(stat="identity") + theme(axis.text.x=element_text(angle=90)) + theme_light() + facet_wrap(~ person) + labs(list(title = "Total Miles Ran Per Week By Location and Person", x = "Week of Year", y = "Total Miles Accomplished"))
require(gridExtra)
grid.arrange(total_time_series, person_time_series, totals, scatter, ncol=2)
p <- ggplot(df, aes(x=week, y=miles, col = location, fill = location)) + geom_bar(stat="identity") + theme(axis.text.x=element_text(angle=90)) + theme_light() + facet_wrap(~ person) + labs(list(title = "Total Miles Ran Per Week By Location and Person", x = "Week of Year", y = "Total Miles Accomplished"))
scatter <- p + theme(plot.title = element_text(hjust = 0.5))
print(scatter)
require(gridExtra)
grid.arrange(total_time_series, person_time_series, totals, scatter, ncol=2)
p <- ggplot(df3, aes(day, miles, label=miles))  + labs(list(title = "Total Miles Accomplished by Everyone (Per Day)", x = "Day of Year", y = "Total Miles Accomplished"))
total_time_series <- p + geom_hline(yintercept = 5.526, colour = "black", size = .8, linetype = "dotted") + annotate("text", x = 21, y = 5.9, label = "Min Needed to meet year goal", size = 3, colour = "black") + theme_light() + theme(plot.title = element_text(hjust = 0.5)) + geom_point(color="black") + geom_text(aes(label=miles),hjust=-.3, vjust=0, color = "black") + geom_smooth()
print(total_time_series)
totals <- ggplot(data = df1, aes(person, miles, fill=person)) + geom_bar(stat = "identity") + geom_text(aes(label=df1$miles), vjust=2, size=4) + labs(list(title = "Total Miles Accomplished Per Person", x = "Person", y = "Total Distance Accomplished (miles)")) + theme_light() + theme(plot.title = element_text(hjust = 0.5))
print(totals)
p <- ggplot(df, aes(x=week, y=miles, col = location, fill = location)) + geom_bar(stat="identity") + theme(axis.text.x=element_text(angle=90)) + theme_light() + facet_wrap(~ person) + labs(list(title = "Total Miles Ran Per Week By Location and Person", x = "Week of Year", y = "Total Miles Accomplished"))
scatter <- p + theme(plot.title = element_text(hjust = 0.5))
print(scatter)
require(gridExtra)
grid.arrange(total_time_series, person_time_series, totals, scatter, ncol=2)
total_time_series <- p + geom_hline(yintercept = 5.526, colour = "black", size = .8, linetype = "dotted") + annotate("text", x = 21, y = 5.9, label = "Min Needed to meet year goal", size = 3, colour = "black") + theme_light() + theme(plot.title = element_text(hjust = 0.5)) + geom_point(color="black", size = 1) + geom_text(aes(label=miles),hjust=-.3, vjust=0, color = "black", size =1) + geom_smooth()
print(total_time_series)
p <- ggplot(df3, aes(day, miles, label=miles))  + labs(list(title = "Total Miles Accomplished by Everyone (Per Day)", x = "Day of Year", y = "Total Miles Accomplished"))
total_time_series <- p + geom_hline(yintercept = 5.526, colour = "black", size = .8, linetype = "dotted") + annotate("text", x = 21, y = 5.9, label = "Min Needed to meet year goal", size = 3, colour = "black") + theme_light() + theme(plot.title = element_text(hjust = 0.5)) + geom_point(color="black", size = 1) + geom_text(aes(label=miles),hjust=-.3, vjust=0, color = "black", size =1) + geom_smooth()
print(total_time_series)
total_time_series <- p + geom_hline(yintercept = 5.526, colour = "black", size = .8, linetype = "dotted") + annotate("text", x = 21, y = 5.9, label = "Min Needed to meet year goal", size = 3, colour = "black") + theme_light() + theme(plot.title = element_text(hjust = 0.5)) + geom_point(color="black", size = 1) + geom_text(aes(label=miles),hjust=-.3, vjust=0, color = "black", size =3) + geom_smooth()
print(total_time_series)
total_time_series <- p + geom_hline(yintercept = 5.526, colour = "black", size = .8, linetype = "dotted") + annotate("text", x = 21, y = 5.9, label = "Min Needed to meet year goal", size = 3, colour = "black") + theme_light() + theme(plot.title = element_text(hjust = 0.5)) + geom_point(color="black", size = 1) + geom_text(aes(label=miles),hjust=-.3, vjust=0, color = "black", size =5) + geom_smooth()
print(total_time_series)
total_time_series <- p + geom_hline(yintercept = 5.526, colour = "black", size = .8, linetype = "dotted") + annotate("text", x = 21, y = 5.9, label = "Min Needed to meet year goal", size = 3, colour = "black") + theme_light() + theme(plot.title = element_text(hjust = 0.5)) + geom_point(color="black", size = 1) + geom_text(aes(label=miles),hjust=-.3, vjust=0, color = "black", size =3.5) + geom_smooth()
print(total_time_series)
totals <- ggplot(data = df1, aes(person, miles, fill=person)) + geom_bar(stat = "identity") + geom_text(aes(label=df1$miles), vjust=2, size=4) + labs(list(title = "Total Miles Accomplished Per Person", x = "Person", y = "Total Distance Accomplished (miles)")) + theme_light() + theme(plot.title = element_text(hjust = 0.5))
print(totals)
p <- ggplot(df, aes(x=week, y=miles, col = location, fill = location)) + geom_bar(stat="identity") + theme(axis.text.x=element_text(angle=90)) + theme_light() + facet_wrap(~ person) + labs(list(title = "Total Miles Ran Per Week By Location and Person", x = "Week of Year", y = "Total Miles Accomplished"))
scatter <- p + theme(plot.title = element_text(hjust = 0.5))
print(scatter)
require(gridExtra)
grid.arrange(total_time_series, person_time_series, totals, scatter, ncol=2)
require(RCurl)
require(dplyr)
require(lubridate)
fileUrl <- "https://docs.google.com/spreadsheets/d/1RTRABrYQhyyfj_Dr3bkmNSnxmM7jbXIMgrI8eOa7Avk/export?format=csv"
fileCSV <- getURL(fileUrl,.opts=list(ssl.verifypeer=FALSE))
fileCSVDF <-  read.csv(textConnection(fileCSV))
df <- fileCSVDF[,c(1:5)]
df$time_stamp <- as.POSIXct(df$time_stamp, format='%m/%d/%Y %H:%M:%OS')
df$run_time <- as.POSIXct(df$run_time, format='%H:%M:%OS')
df$run_time <- format(df$run_time, format='%H:%M:%OS')
df$run_time_decimal <-  sapply(strsplit(df$run_time,":"),
function(x) {
x <- as.numeric(x)
x[1]+x[2]/60
}
)
df$week <- format(df$time_stamp, format='%W')
df$week <- as.numeric(df$week)
df$week[df$week == 0] <- 1
df$day <- yday(df$time_stamp)
df$year <- year(df$time_stamp)
df$week[df$week == '00'] <- '01'
df$weekday <- weekdays(df$time_stamp)
df$location[df$location == "Hell (treadmill)"] <- 'Treadmill'
df1 <- aggregate(df$miles, by=list(day=df$day), FUN=sum)
df1$year <- 2017
colnames(df1) <- c("day","miles","year")
df2 <- df1 %>% group_by(year) %>% mutate(cumsum = cumsum(miles))
df3 <- df2[,-c(2:3)]
model1 <- lm(cumsum ~ day, df3)
summary(model1)
confint(model1, conf.level=0.95)
plot(model1)
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5)), x = "Day of Year", y = "Total Distance Completed in Miles")
}
p <- ggplotRegression(model1)
total_reg <- p + theme_light() + theme(plot.title = element_text(hjust = 0.5))
total_reg
year_df <- data.frame(day = 53:365)
year_df$cumsum <- predict(model1, year_df)
df4 <- rbind(df3, year_df)
predicted_total <- ggplot(year_df, aes(day, cumsum)) + geom_line() + geom_smooth(method = "lm", col = "blue") + labs(title = "Predicted Year End Distance", x = "Day of Year", y = "Total Distance Completed in Miles") + geom_hline(yintercept = 2017, colour = "red", size = .8, linetype = "dotted") + annotate("text", x = 70, y = 1875, label = "2017 Miles", size = 4, colour = "black")
predicted_reg <- predicted_total + theme_light() + theme(plot.title = element_text(hjust = 0.5)) + annotate("text", x = 360, y = 1250, label = "1489.58
Miles", size = 4, colour = "blue")
require(gridExtra)
grid.arrange(total_reg, predicted_reg, ncol=1)
grid.arrange(total_time_series, person_time_series, totals, scatter, ncol=2)
require(gridExtra)
grid.arrange(total_time_series, person_time_series, totals, scatter, ncol=2)
grid.arrange(total_time_series, person_time_series, totals, total_reg, ncol=2)
grid.arrange(total_time_series, person_time_series, totals, total_reg, ncol=1)
grid.arrange(total_time_series, person_time_series, totals, total_reg, ncol=4)
require(RCurl)
fileUrl <- "https://docs.google.com/spreadsheets/d/1RTRABrYQhyyfj_Dr3bkmNSnxmM7jbXIMgrI8eOa7Avk/export?format=csv"
fileCSV <- getURL(fileUrl,.opts=list(ssl.verifypeer=FALSE))
fileCSVDF <-  read.csv(textConnection(fileCSV))
df <- fileCSVDF[,c(1:5)]
require(lubridate)
df$time_stamp <- as.POSIXct(df$time_stamp, format='%m/%d/%Y %H:%M:%OS')
df$run_time <- as.POSIXct(df$run_time, format='%H:%M:%OS')
df$run_time2 <- format(df$run_time, format='%H:%M:%OS')
df$week <- format(df$time_stamp, format='%W')
df$yday <- yday(df$time_stamp)
df$year <- year(df$time_stamp)
df$week[df$week == '00'] <- '01'
df$location[df$location == "Hell (treadmill)"] <- 'Treadmill'
df1 <- aggregate(df$miles, by=list(person=df$person), FUN=sum)
colnames(df1) <- c("person","miles")
df2 <- aggregate(df$miles, by=list(person=df$person, day=df$yday), FUN=sum)
colnames(df2) <- c("person","day","miles")
df3 <- aggregate(df$miles, by=list(yday=df$yday), FUN=sum)
colnames(df3) <- c("day","miles")
df4 <- aggregate(df$miles, by=list(person=df$person, week=df$week), FUN=sum)
colnames(df4) <- c("person", "week","miles")
require(ggplot2)
p <- ggplot(df, aes(week, miles, colour=person, fill = person , label = miles)) + geom_bar(stat="identity")  + labs(list(title = "Total Miles Accomplished Per Week", x = "Week of Year", y = "Total Miles Accomplished")) + theme_light()
person_time_series <- p + scale_y_continuous(expand = c(0, .5)) + geom_hline(yintercept = 9.697, colour = "black", size = .8, linetype = "dotted") + annotate("text", x = 3, y = 10.3, label = "9.697 Miles", size = 3, colour = "black") + theme(plot.title = element_text(hjust = 0.5)) + facet_wrap(~ person)
print(person_time_series)
p <- ggplot(df3, aes(day, miles, label=miles))  + labs(list(title = "Total Miles Accomplished by Everyone (Per Day)", x = "Day of Year", y = "Total Miles Accomplished"))
total_time_series <- p + geom_hline(yintercept = 5.526, colour = "black", size = .8, linetype = "dotted") + annotate("text", x = 21, y = 5.9, label = "Min Needed to meet year goal", size = 3, colour = "black") + theme_light() + theme(plot.title = element_text(hjust = 0.5)) + geom_point(color="black", size = 1) + geom_text(aes(label=miles),hjust=-.3, vjust=0, color = "black", size =3.5) + geom_smooth()
print(total_time_series)
totals <- ggplot(data = df1, aes(person, miles, fill=person)) + geom_bar(stat = "identity") + geom_text(aes(label=df1$miles), vjust=2, size=4) + labs(list(title = "Total Miles Accomplished Per Person", x = "Person", y = "Total Distance Accomplished (miles)")) + theme_light() + theme(plot.title = element_text(hjust = 0.5))
print(totals)
p <- ggplot(df, aes(x=week, y=miles, col = location, fill = location)) + geom_bar(stat="identity") + theme(axis.text.x=element_text(angle=90)) + theme_light() + facet_wrap(~ person) + labs(list(title = "Total Miles Ran Per Week By Location and Person", x = "Week of Year", y = "Total Miles Accomplished"))
scatter <- p + theme(plot.title = element_text(hjust = 0.5))
print(scatter)
require(gridExtra)
grid.arrange(total_time_series, person_time_series, totals, total_reg, ncol=1)
grid.arrange(total_time_series, person_time_series, totals, total_reg, ncol=2)
source('~/GitHub/Running_App/predict_total_distance.R')
grid.arrange(total_time_series, person_time_series, totals, total_reg, ncol=2)
source('~/GitHub/Running_App/Vizualize progress.R')
one <- grid.arrange(scatter, person_time_series, totals, total_reg, ncol=2)
grid.arrange(one, total_time_series, ncol=2)
one <- grid.arrange(scatter, person_time_series, totals, total_reg, ncol=1)
grid.arrange(one, total_time_series, ncol=5)
grid.arrange(total_time_series, one, ncol=2)
grid.arrange(total_time_series, one, ncol=1)
one <- grid.arrange(scatter, person_time_series, totals, total_reg, ncol=1)
one <- grid.arrange(person_time_series, totals, total_reg, ncol=1)
one <- grid.arrange(person_time_series, totals, total_reg, ncol=2)
one <- grid.arrange(scatter, person_time_series, totals, total_reg, ncol=2)
grid.arrange(total_time_series, one, ncol=1)
grid.arrange(one, total_time_series, ncol=1)
one <- grid.arrange(predicted_reg, person_time_series, totals, total_reg, ncol=2)
grid.arrange(one, total_time_series, ncol=1)
one <- grid.arrange(person_time_series, totals, predicted_reg, total_reg, ncol=2)
grid.arrange(one, total_time_series, ncol=1)
source('~/GitHub/Running_App/Vizualize progress.R')
one <- grid.arrange(person_time_series, totals, predicted_reg, total_reg, ncol=2)
